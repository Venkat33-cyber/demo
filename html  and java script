<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Floating Bubbles</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <canvas id="bubbleCanvas"></canvas>
  <script src="script.js"></script>
</body>
</html>
  body, html {
  margin: 0;
  padding: 0;
  overflow: hidden;
  background: linear-gradient(to top right, #0f2027, #203a43, #2c5364);
  height: 100vh;
}

canvas {
  display: block;
}
const canvas = document.getElementById("bubbleCanvas");
const ctx = canvas.getContext("2d");

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let bubbles = [];

class Bubble {
  constructor() {
    this.x = Math.random() * canvas.width;
    this.y = canvas.height + Math.random() * 100;
    this.radius = Math.random() * 20 + 10;
    this.speed = Math.random() * 2 + 1;
    this.color = `hsla(${Math.random() * 360}, 70%, 70%, 0.6)`;
  }

  update() {
    this.y -= this.speed;
    if (this.y < -this.radius) {
      this.y = canvas.height + this.radius;
      this.x = Math.random() * canvas.width;
    }
  }

  draw() {
    ctx.beginPath();
    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
    ctx.fillStyle = this.color;
    ctx.fill();
  }
}

function initBubbles(count) {
  for (let i = 0; i < count; i++) {
    bubbles.push(new Bubble());
  }
}

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  bubbles.forEach(bubble => {
    bubble.update();
    bubble.draw();
  });
  requestAnimationFrame(animate);
}

initBubbles(100);
animate();

window.addEventListener("resize", () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});
